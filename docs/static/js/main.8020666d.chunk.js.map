{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategorias","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cat","type","value","onChange","target","getGifs","categoria","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categorias","ReactDOM","render","document","getElementById"],"mappings":"iNAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cACzB,EAAmCC,mBAAS,IAA5C,mBAAOC,EAAP,KAAkBC,EAAlB,KAYA,OACI,sBAAMC,SARW,SAACC,GAClBA,EAAEC,iBACCJ,EAAWK,OAAOC,OAAS,IAC1BR,GAAc,SAAAS,GAAG,OAAKP,GAAL,mBAAmBO,OACpCN,EAAc,MAIlB,SACI,uBACIO,KAAK,OACLC,MAAOT,EACPU,SAhBc,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,a,+BCLlBG,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DACbC,EADa,iDACoCC,UAAUH,GAD9C,+DAEAI,MAAMF,GAFN,cAEbG,EAFa,gBAGEA,EAAKC,OAHP,uBAGZC,EAHY,EAGZA,KAEDC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAGD,EAAIC,GACPC,MAAMF,EAAIE,MACVV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QATvB,kBAYZM,GAZY,4CAAH,sDCCPO,EAAc,SAAC,GAAmB,EAAlBJ,GAAmB,IAAhBC,EAAe,EAAfA,MAAMV,EAAS,EAATA,IAClC,OACI,sBAAKc,UAAU,yCAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCAHO,EAAU,SAAC,GAAiB,IAAhBnB,EAAe,EAAfA,UAErB,ECLwB,SAACA,GACzB,MAAwBd,mBAAS,CAC7BqB,KAAK,GACLa,SAAQ,IAFZ,mBAAOC,EAAP,KAAaC,EAAb,KAiBA,OAZAC,qBAAU,WACNxB,EAAQC,GACHwB,MAAK,SAAAC,GACFH,EAAS,CACLf,KAAKkB,EACLL,SAAS,SAGtB,CAACpB,IAIGqB,EDbuBK,CAAa1B,GAA/Ba,EAAZ,EAAON,KAAYa,EAAnB,EAAmBA,QAQnB,OACI,eAAC,WAAD,WACI,qBAAIJ,UAAU,oCAAd,cAAoDhB,EAApD,OACCoB,EAAU,mBAAGJ,UAAU,mCAAb,qBAA8D,KACzE,qBAAKA,UAAU,YAAf,SAEIH,EAAOJ,KAAK,SAAAC,GAAG,OACP,cAAC,EAAD,eAEQA,GADCA,EAAIC,aElBxBgB,EAAe,WAExB,MAAmCzC,mBAAS,CAAC,qBAA7C,mBAAO0C,EAAP,KAAkB3C,EAAlB,KAEA,OACI,eAAC,WAAD,WACI,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBACA,6BAEQ2C,EAAWnB,KAAI,SAAAT,GAAS,OACpB,cAAC,EAAD,CAEIA,UAAWA,GADNA,YCdjC6B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.8020666d.chunk.js","sourcesContent":["import React,{useState} from 'react'\nimport PropTypes from 'prop-types';\n\nexport const AddCategory = ({setCategorias}) => {\n    const [inputValue,setInputValue] = useState('');\n    const handleInputChange = (e) =>Â {  // escucha de nuestra entrada tomando el valor de la caja\n        setInputValue(e.target.value);\n    }\n\n    const handleSubmit = (e) => {   // evento para submit del formulario previene el refresh que tiene por default\n        e.preventDefault();\n        if(inputValue.trim().length > 2){\n            setCategorias(cat => [inputValue,...cat]);\n            setInputValue('');\n        }\n    }\n    return (\n        <form onSubmit={handleSubmit}>\n            <input\n                type=\"text\"\n                value={inputValue}\n                onChange={handleInputChange}\n            />\n        </form>\n    )\n}\n\nAddCategory.propTypes = {\n    setCategorias: PropTypes.func.isRequired\n}\n","\nexport const getGifs = async(categoria) => {\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(categoria)}&limit=10&api_key=H7MWAX3csc2efqY5MFplb0mn3h3y5nL5`;\n    const resp = await fetch(url);\n    const {data} = await resp.json();\n    \n    const gifs = data.map(img => {\n        return {\n            id:img.id,\n            title:img.title,\n            url: img.images?.downsized_medium.url\n        }\n    })\n    return gifs;\n}","import React from 'react'\n\nexport const GifGridItem = ({id,title,url}) => {\n    return (\n        <div className=\"card animate__animated animate__fadeIn\">\n            <img src={url} alt={title}/>\n            <p>{title}</p>\n        </div>\n    )\n}\n","import React, { Fragment} from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs'\n\nimport { GifGridItem } from './GifGridItem';\n// import { getGifs } from '../helpers/getGifs';\n\nexport const GifGrid = ({categoria}) => {\n    // const [images,setImages] = useState([]);\n    const {data:images,loading} = useFetchGifs(categoria);\n\n\n    // useEffect(()=> {    // esta funcion se debe ejecutar una vez cuando se renderize la app\n    //     getGifs(categoria).then(imgs => setImages(imgs));   // retorna una promesa que procesamos con then\n    // },[categoria]);\n\n\n    return (\n        <Fragment>\n            <h3 className=\"animate__animated animate__fadeIn\"> {categoria} </h3>\n            {loading ? <p className=\"animate__animated animate__flash\">Loading</p> : null}\n            <div className=\"card-grid\">\n                {\n                images.map( img => (\n                        <GifGridItem \n                            key={img.id}\n                            {...img}\n                        />\n                    ))\n                }\n            </div>\n        </Fragment> \n    )\n}\n","import { useState,useEffect } from \"react\";\nimport {getGifs} from '../helpers/getGifs';\n\nexport const useFetchGifs = (categoria) => {\n    const [state,setState]= useState({\n        data:[],\n        loading:true\n    });\n\n    useEffect(() => {   // realizar una vez se renderice el componente \n        getGifs(categoria)\n            .then(imgs => {\n                setState({\n                    data:imgs,\n                    loading: false\n                });\n            })\n    }, [categoria]);\n\n    \n\n    return state; // {data:[], loading:true}\n}","import React,{Fragment, useState} from 'react';\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n// import PropTypes from 'prop-types';\n\n\nexport const GifExpertApp = () => {\n\n    const [categorias,setCategorias] = useState(['Fast and furious']);\n\n    return (\n        <Fragment>\n            <h2>GifExpertApp</h2>\n            <AddCategory setCategorias={setCategorias}/>\n            <hr />\n            <ol>\n                {\n                    categorias.map(categoria => (\n                        <GifGrid \n                            key={categoria}\n                            categoria={categoria}\n                        />\n                    ))\n                }\n            </ol>\n        </Fragment>\n    );\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport {GifExpertApp} from './GifExpertApp';\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);"],"sourceRoot":""}